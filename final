import pygame
import random
import sys

pygame.init()
pygame.display.set_caption("Jogo Snake Python")

# Tamanho da tela
largura, altura = 1200, 800
tela = pygame.display.set_mode((largura, altura))
relogio = pygame.time.Clock()

# Cores RGB
preta = (0, 0, 0)
branca = (255, 255, 255)
vermelha = (255, 0, 0)
verde = (0, 255, 0)
azul = (0, 0, 255)
amarela = (255, 255, 0)

# Parâmetros da cobrinha
tamanho_quadrado = 20
velocidade_jogo = 15

def gerar_comida():
    comida_x = round(random.randrange(
        0, largura - tamanho_quadrado) / tamanho_quadrado) * tamanho_quadrado
    comida_y = round(random.randrange(
        0, altura - tamanho_quadrado) / tamanho_quadrado) * tamanho_quadrado
    return comida_x, comida_y

def desenhar_comida(tamanho, comida_x, comida_y):
    pygame.draw.rect(tela, verde, [comida_x, comida_y, tamanho, tamanho])

def desenhar_cobra(tamanho, pixels):
    for pixel in pixels:
        pygame.draw.rect(tela, branca, [pixel[0], pixel[1], tamanho, tamanho])

def desenhar_pontuacao(pontuacao):
    fonte = pygame.font.SysFont("Helvetica", 35)
    texto = fonte.render(f"Pontos: {pontuacao}", True, vermelha)
    tela.blit(texto, [1, 1])

def mostrar_mensagem_pausa():
    fonte = pygame.font.SysFont("Helvetica", 50)
    texto = fonte.render("PAUSADO", True, amarela)
    tela.blit(texto, [largura/2 - texto.get_width()/2, altura/2 - 50])
    
    fonte_instrucao = pygame.font.SysFont("Helvetica", 30)
    instrucao = fonte_instrucao.render("Pressione ESPAÇO para continuar", True, branca)
    tela.blit(instrucao, [largura/2 - instrucao.get_width()/2, altura/2 + 20])

def selecionar_velocidade(tecla):
    if tecla == pygame.K_DOWN:
        return 0, tamanho_quadrado
    elif tecla == pygame.K_UP:
        return 0, -tamanho_quadrado
    elif tecla == pygame.K_RIGHT:
        return tamanho_quadrado, 0
    elif tecla == pygame.K_LEFT:
        return -tamanho_quadrado, 0
    return None  # Retorna None para teclas não direcionais

def mostrar_game_over(pontuacao):
    tela.fill(preta)
    fonte_game_over = pygame.font.SysFont("Helvetica", 50)
    fonte_reiniciar = pygame.font.SysFont("Helvetica", 35)
    
    texto_game_over = fonte_game_over.render("GAME OVER", True, vermelha)
    texto_pontuacao = fonte_reiniciar.render(f"Pontuação final: {pontuacao}", True, branca)
    texto_reiniciar = fonte_reiniciar.render("Pressione R para reiniciar ou Q para sair", True, branca)
    
    tela.blit(texto_game_over, [largura/2 - texto_game_over.get_width()/2, altura/2 - 100])
    tela.blit(texto_pontuacao, [largura/2 - texto_pontuacao.get_width()/2, altura/2])
    tela.blit(texto_reiniciar, [largura/2 - texto_reiniciar.get_width()/2, altura/2 + 50])
    
    pygame.display.update()
    
    esperando = True
    while esperando:
        for evento in pygame.event.get():
            if evento.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if evento.type == pygame.KEYDOWN:
                if evento.key == pygame.K_r:
                    esperando = False
                    rodar_jogo()
                elif evento.key == pygame.K_q:
                    pygame.quit()
                    sys.exit()

def rodar_jogo():
    fim_jogo = False
    pausado = False
    x = largura / 2
    y = altura / 2
    velocidade_x = 0
    velocidade_y = 0
    tamanho_cobra = 1
    pixels = []
    comida_x, comida_y = gerar_comida()

    while not fim_jogo:
        tela.fill(preta)

        for evento in pygame.event.get():
            if evento.type == pygame.QUIT:
                fim_jogo = True
                pygame.quit()
                sys.exit()
            elif evento.type == pygame.KEYDOWN:
                if evento.key == pygame.K_SPACE:
                    pausado = not pausado  # Alterna entre pausado e despausado
                elif not pausado:
                    # Só processa teclas direcionais se não estiver pausado
                    nova_velocidade = selecionar_velocidade(evento.key)
                    if nova_velocidade is not None:
                        nova_velocidade_x, nova_velocidade_y = nova_velocidade
                        # Impede a cobra de dar a volta instantaneamente
                        if (nova_velocidade_x != -velocidade_x or nova_velocidade_y != -velocidade_y):
                            velocidade_x, velocidade_y = nova_velocidade_x, nova_velocidade_y

        if pausado:
            # Desenha o jogo pausado (mantém a última frame)
            desenhar_comida(tamanho_quadrado, comida_x, comida_y)
            desenhar_cobra(tamanho_quadrado, pixels)
            desenhar_pontuacao(tamanho_cobra - 1)
            mostrar_mensagem_pausa()
            pygame.display.update()
            relogio.tick(velocidade_jogo)
            continue  # Pula o resto do loop enquanto pausado

        # Atualiza a posição da cobra (só se não estiver pausado)
        x += velocidade_x
        y += velocidade_y

        if x < 0 or x >= largura or y < 0 or y >= altura:
            mostrar_game_over(tamanho_cobra - 1)
            return

        # Desenha comida
        desenhar_comida(tamanho_quadrado, comida_x, comida_y)

        # Atualiza corpo da cobra
        pixels.append([x, y])
        if len(pixels) > tamanho_cobra:
            del pixels[0]

        # Verifica colisão com o próprio corpo
        for pixel in pixels[:-1]:
            if pixel == [x, y]:
                mostrar_game_over(tamanho_cobra - 1)
                return

        # Desenha cobra e pontuação
        desenhar_cobra(tamanho_quadrado, pixels)
        desenhar_pontuacao(tamanho_cobra - 1)

        # Verifica se comeu a comida
        if x == comida_x and y == comida_y:
            tamanho_cobra += 1
            comida_x, comida_y = gerar_comida()

        pygame.display.update()
        relogio.tick(velocidade_jogo)

rodar_jogo()